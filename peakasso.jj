PARSER_BEGIN(javacc)

import java.util.*;
import java.awt.*;
import javax.swing.*;
public class javacc {
   
    public static void main(String[] args) {

        if (args.length==0) {
            System.out.println("Please enter a file");
            return;
        }

        try {
            new javacc(new java.io.FileInputStream(new java.io.File(args[0]))).javacc_init();
        } catch(java.io.IOException e) {
            System.out.println("File not found");
        } catch(ParseException e){
            e.printStackTrace();
        }

    }
    public  static Color defaultColor = Color.BLACK;
    public static Scanner sc = new Scanner(System.in);
    public static JFrame pencere = new JFrame();
    public static HashMap<String, String[]> map = new HashMap<String, String[]>();
    public static int[][] grid;
    public static int color = 1;

}

PARSER_END(javacc)

SKIP: {
  < " " | "\t" | "\r" | "\n" | "\r\n" >
| < "!!" (~["\n","\r"])* ("\n"|"\r"|"\r\n") >
}

void javacc_init() : {} {
    "PROGRAM" <ID> ";" CanvasInitSection() BrushDeclarationSection() DrawingSection()
}

void CanvasInitSection() : {} {
    "CANVAS-INIT-SECTION" ":" CanvasSizeInit() CursorPosInit()
}

void CanvasSizeInit() :
 {
Token t1; 
Token t2;
} 
{
     "CONST" "CanvasX" "=" t1=<INT_LIT> ";"
     {int  xCor = Integer.parseInt(t1.image);}
     "CONST" "CanvasY" "=" t2=<INT_LIT> ";"
     {int yCor = Integer.parseInt(t2.image); }
     {
         grid = new int[xCor][yCor];
         pencere.setLayout(new GridLayout(xCor, yCor));
     }
}

void CursorPosInit() : {Token token;} 
{
    "CursorX" "=" token=<INT_LIT> ";"
    {if(map.get("CursorX") != null) throw new ParseException("You cannot re-initiate the variable");
    else {String[] arr = {token.image + "" }; map.put("CursorX", arr); }}
    "CursorY" "=" token=<INT_LIT> ";"
    {if(map.get("CursorY") != null) throw new ParseException("You cannot re-initiate the variable");
    else {String[] arr2 = { token.image + "" }; map.put("CursorY", arr2);}}
}

void BrushDeclarationSection() : {} 
{
    "BRUSH-DECLARATION-SECTION" ":" (VariableDef())?
}

void VariableDef() : {} 
{
    "BRUSH" BrushList() ";"
}

void BrushList() : {} 
{
    BrushName() (LOOKAHEAD(2) "," BrushList())*
}

String BrushName() : 
{
Token en; 
Token boy;
Token id; 
Token colori;
} 
{
    id=<ID>
    ("=" en=<INT_LIT> boy=<INT_LIT> colori =<ID> {String arr[] = { en.image, boy.image, colori.image+"" };  map.put(id.image, arr); return id.image;})?
    {return id.image;}
}

void DrawingSection() : {} 
{
    "DRAWING-SECTION" ":" (Statement() ";")*
}

void Statement() : {} 
{
    RenewStmt() | PaintStmt() | ExhibitStmt() | CursorMoveStmt()
}

void RenewStmt() : 
{
String mesag; 
String en; 
String boy;
String bn; 
} 
{
    "RENEW-BRUSH" mesag=get_message() bn=BrushName()
  {
    System.out.println(mesag); 
    String color = map.get(bn)[2];  
    en=sc.next(); 
    boy=sc.next(); 
    String arr[] = { en, boy, color }; 
    map.put(bn, arr);
  }
}

void PaintStmt() : 
{

int cursorx; 
int cursory; 
int butonx; 
int butony; 
String Color;
String bin;
int num=0; 
} 
{
    "PAINT-CANVAS" bin=BrushName()
    {
    cursorx = Integer.parseInt(map.get("CursorX")[0]);
    cursory = Integer.parseInt(map.get("CursorY")[0]);
    butonx = Integer.parseInt(map.get(bin)[0]);
    butony = Integer.parseInt(map.get(bin)[1]);
    Color = map.get(bin)[2];
 switch(Color){
      case "WHITE":
     num=0;
     break;
      case "RED":
      num=1;
      break;
      case "GREEN":
      num=2;
      break;
      case  "BLUE":
     num=3;
      break;
      case "BLACK":
      num=4;
      break;
      case "YELLOW":
      num=5;
      break;
      case "PINK":
      num=6;
      break;
      case "ORANGE":
      num=7;
      break;
      default:
      num =8;
          
  }
      for(int x = cursorx - 1; x < cursorx + butony - 1; x++)
        for(int y =cursory - 1; y < cursory + butonx - 1; y++)
            grid[y][x] = num;
  }
}

void ExhibitStmt() : {} 
{
    "EXHIBIT-CANVAS"
    {
         int rand=(int)(Math.random() * 7);
        for(int x = 0; x < grid.length; x++) {
            for(int y = 0; y < grid[0].length; y++) {
                JButton btn;
                if(grid[x][y] == 0) {
                  btn = new JButton(); btn.setBackground(Color.WHITE);
                }
                else if(grid[x][y] == 1) {
                  btn = new JButton(); btn.setBackground(Color.RED);
                }
                else if(grid[x][y] == 2) {
                  btn = new JButton(); btn.setBackground(Color.GREEN);
                }
                else if(grid[x][y] == 3) {
                  btn = new JButton(); btn.setBackground(Color.BLUE);
                }
                else if(grid[x][y] == 4) {
                  btn = new JButton(); btn.setBackground(Color.BLACK);
                }
                else if(grid[x][y] == 5) {
                  btn = new JButton(); btn.setBackground(Color.YELLOW);
                }
                else if(grid[x][y] == 6) {
                  btn = new JButton(); btn.setBackground(Color.PINK);
                }
                else if(grid[x][y] == 7) {
                  btn = new JButton(); btn.setBackground(Color.ORANGE);
                }
                else {
                  btn = new JButton(); btn.setBackground(defaultColor);
                }
                btn.setEnabled(false);
                btn.setOpaque(true);
                pencere.add(btn);
            }
        }
        pencere.setSize(600, 600);
        pencere.setVisible(true);
    }
}

void CursorMoveStmt() : 
{
String curs; 
String exp;
} 
{
    "MOVE" curs=cursor() "TO" exp=expression()
    {
    int dimension = 0;
    if(curs.contains("X")) dimension = 1;
    String[] terms=exp.split(" ");
    if(terms.length==1) { String arr[] = { terms[0] }; map.put(curs,arr); }
    else switch(terms[1]) {
        case("PLUS"):
            int sum = Integer.parseInt(map.get(terms[0])[0])+Integer.parseInt(terms[2]);
            int size_canvas = dimension == 1 ? grid.length : grid[0].length;
            if(sum > size_canvas) throw new ParseException("Not a valid argument");
            String arr[] = { sum + "" };
            map.put(curs, arr);
            break;
        case("MINUS"):
            sum = Integer.parseInt(map.get(terms[0])[0])-Integer.parseInt(terms[2]);
            size_canvas = dimension == 1 ? grid.length : grid[0].length;
            if(sum < 0) throw new ParseException("Not a valid argument");
            String arr2[] = { sum + "" };
            map.put(curs, arr2);
    }
    }
}

String cursor() : {}
{
    "CursorX" { return "CursorX"; } | "CursorY" { return "CursorY"; }
}

String expression() : 
{String token; 
String exp; 
String op = ""; 
String token2;} 
{
    token=term()  ( LOOKAHEAD(2) (exp=expression() | op=operation()) token2=term() {return token + " " + op+ " " + token2;})*
    { return token; }

}

String operation() : {} 
{
    "PLUS" { return "PLUS"; } | "MINUS" { return "MINUS"; }
}

String term() : 
{String str;
} 
{
    str=factor() { return str;}
}

String factor() : 
{Token token;
 String curs;} 
{
    token = < INT_LIT > { return token.image; } | curs=cursor() {return curs; }
    | "CanvasX"  { return "CanvasX"; } | "CanvasY" { return "CanvasY"; }
    | "(" curs=expression() ")" { return curs; }
}


String get_message():
{Token token;
} 
{
    token = <MESSAGE>
    {return token.image.substring(1, token.image.length()-1);}
}

TOKEN : {
    < ID: ["a"-"z","A"-"Z"] (["a"-"z","A"-"Z"]|["0"-"9"])* >
}

TOKEN : {
    < INT_LIT: <DECIMAL_LITERAL> | (<SIGN><DECIMAL_LITERAL>) >
    |
    < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])*>
    |
    < #SIGN: ("+" | "-") >
}

TOKEN : {
    < MESSAGE: ["\'"] (~["\"","\n","\r"])* ["\'"] >
}